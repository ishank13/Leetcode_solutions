    //Approach -> 3 cases -> 1. perfectly same as it is
                             2. captilisation (case sensitive)
                             3. vowels can in interchange
   // So take 3 hashmaps for each case and for case 2 convert word into all lowercase characaters and for case 3 mark the vowel positons as '*'.
   // then just simply return according to cases.
    
    Set<String> set;
    HashMap<String, String> map1;
    HashMap<String, String> map2;
    
    public String[] spellchecker(String[] wordlist, String[] queries) {
        
        set = new HashSet<>();
        map1 = new HashMap<>();
        map2 = new HashMap<>();
        
        for(String word : wordlist){
            set.add(word);
            
            String w1 = word.toLowerCase();
            map1.putIfAbsent(w1, word);
            
            String w2 = deVowel(w1);
            map2.putIfAbsent(w2, word);       
        }
        
        String[] ans = new String[queries.length];
        for(int i=0; i<queries.length; i++){
            ans[i] = solve(queries[i]);
        }
        
        return ans;
    }
    
    
    public String solve(String query){
        if(set.contains(query)) 
            return query;
        
        String q1 = query.toLowerCase();
        if(map1.containsKey(q1))
            return map1.get(q1);
        
        String q2 = deVowel(q1);
        if(map2.containsKey(q2))
            return map2.get(q2);
        
        return "";
    }
    
    public String deVowel(String word){
        StringBuilder ans = new StringBuilder();
        for(char c : word.toCharArray()){
            ans.append(isVowel(c) ? '*' : c);
        }
        
        return ans.toString();
    }
    
    public boolean isVowel(char c){
        return (c == 'a' || c == 'e' || c== 'o' || c== 'i' || c=='u');
    }
