    // Applying Union Find Algorithm
    // Here only point is to think about all cells and to create a grid.
    // divide all cells of grid into 4 parts numbered(0,1,2,3) and then union them according to character('/' or '\\').
    // and then count the cells whose parent is themselves.
    
    int[] par;
    public int regionsBySlashes(String[] grid){
        int n = grid.length;
        int m = grid[0].length();
        
        par = new int[4*n*m];
        for(int i=0; i<(4*n*m); i++) 
            par[i] = i;
        
        for(int i=0; i<grid.length; i++){
            for(int j=0; j<grid[i].length(); j++){
                
                char ch = grid[i].charAt(j);
                int root = 4*(i*n+j); // position
                
                if(ch != '/'){
                    union(root+0, root+2);
                    union(root+1, root+3);     
                }
                if(ch != '\\'){
                    union(root+0, root+1);
                    union(root+2, root+3);
                }
                
                int root1=0; // for other position
                
                if(i-1 >= 0){
                    root1 = 4*((i-1)*m+j);
                    union(root+0, root1+3);
                }
                if(j-1 >= 0){
                    root1 = 4*(i*m+(j-1));
                    union(root+1, root1+2);
                }
                if(i+1 < n){
                    root1 = 4*((i+1)*m+j);
                    union(root+3, root1+0);
                }
                if(j+1 < m){
                    root1 = 4*(i*m+(j+1));
                    union(root+2, root1+1);
                }
            }    
        }
        
        int ans = 0;
        for(int i=0; i<par.length; i++){
            if(par[i] == i) 
                ans++;
        }   
        return ans;
    }
    
    public void union(int u, int v){
        int p1 = findPar(u);
        int p2 = findPar(v);
        if(p1 != p2) par[p1] = p2;
    }
    
    public int findPar(int u){
        if(par[u] == u)
            return u;
        return par[u] = findPar(par[u]);
    }
