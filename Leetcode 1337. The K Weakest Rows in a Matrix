// Approach -> Simply take max type priority Queue and maintain size of priority queue of k. At the end we get k minimum/weakest row's indexes.

  public int[] kWeakestRows(int[][] mat, int k) {
        int n = mat.length;
        int m = mat[0].length;
        
        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b)->{
            if(a[1] == b[1]) return b[0] - a[0];
            return b[1] - a[1];
        });
        
        int[] arr = new int[k];
        
        for(int i=0; i<n; i++){
            int count=0;
            int j=0;
            while(j < m && mat[i][j] == 1){
                count++;
                j++;
            }
            pq.add(new int[]{i, count});
            if(pq.size() > k)
                pq.poll();
        }
        
        int i = k-1;
        while(pq.size() != 0){
            arr[i--] = pq.poll()[0];
        }
        
        return arr;
    }
