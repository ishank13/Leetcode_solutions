// Approach -> calculating left greater and right greater for every index to calculate width and then multiply it with its own height 

public int trap(int[] height) {
        int n = height.length;
        if(n == 0)
            return 0;

        Stack<Integer> st = new Stack();
        int water = 0;
        for(int i=0; i<n; i++){
            while(!st.isEmpty() && height[st.peek()] < height[i]){
                int h = height[st.peek()];
                st.pop();
                if(st.size() == 0) break;
                int w = i - st.peek() - 1;

                water += (Math.min(height[st.peek()], height[i]) - h) * w;
            }
            st.push(i);
        }    
        return water;    
    }
