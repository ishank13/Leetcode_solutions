static int idx;
    static int[] arr;
    static List<Integer> ans;
    public List<Integer> flipMatchVoyage(TreeNode root, int[] voyage) {
        ans = new ArrayList<>();
        arr = voyage;
        idx = 0;
        
        dfs(root);
        if(!ans.isEmpty() && ans.get(0) == -1){
            ans.clear();
            ans.add(-1);
        }
        return ans;
    }
    
    public static void dfs(TreeNode node){
        if(node != null){
            if(node.val != arr[idx++]){
                ans.clear();
                ans.add(-1);
            }

            if(idx < arr.length && node.left != null && node.left.val != arr[idx]){
                ans.add(node.val);
                dfs(node.right);
                dfs(node.left);
            }else{
                dfs(node.left);
                dfs(node.right);
            }
        }
    }
