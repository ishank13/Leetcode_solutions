//Approach -> 2 pointer approach -> put i at starting of array and run pointers j&k in range [i+1, arr.length].
// 2 cases -> if arr[j] == arr[k] then simply (Nc2) pairs i.e. (k-j+1) * (k-j) /2
// and other case -> if arr[i] != arr[k] then if(arr[j] + arr[k] == target) count the pairs.  

public int threeSumMulti(int[] arr, int target) {
        
        int mod = 1000000007;
        
        Arrays.sort(arr);
        
        int ans=0;
        
        for(int i=0; i<arr.length; i++){
            int T = target - arr[i];
            
            int j=i+1;
            int k=arr.length-1;
            
            while(j < k){
                if(arr[j] + arr[k] < T)
                    j++;
                else if(arr[j] + arr[k] > T)
                    k--;
                else if(arr[j] != arr[k]){
                    int left = 1;
                    int right=1;
                    
                    while(j+1 < k && arr[j] == arr[j+1]){
                        left++;
                        j++;
                    }
                    while(k-1 > j && arr[k] == arr[k-1]){
                        right++;
                        k--;
                    }
                    
                    ans += left*right;
                    j++;
                    k--;
                }else{
                    
                    ans += (k-j+1) * (k-j) / 2;
                    ans %= mod;
                    break;
                }
            }
        }
        return ans;
    }
