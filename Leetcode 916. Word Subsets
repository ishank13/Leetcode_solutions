//Approach -> if b in B is subset of a(in A) then a is superset of b.
// Hence frequency of character in a should be greater than or equal to max of frequency of character of every b in B
// if this condition is true then only a is universal
// so, we'll convert all b into single word with max frequncy of every character.
// and then compare it with a.
  
  public List<String> wordSubsets(String[] A, String[] B) {
        
        int[] freq = new int[26];
        
        for(String s : B){
            int[] bCount = helper(s);
            for(int j=0; j<26; j++)
                freq[j] = Math.max(freq[j], bCount[j]);
        }
        
        List<String> ans = new ArrayList<>();
        
        for(String s : A){
            int[] aCount = helper(s);
            boolean flag = true;
            for(int k=0; k<26; k++){
                if(aCount[k] < freq[k]){
                    flag = false;
                    break;
                }
            }
            if(flag)
                ans.add(s);
        }
        return ans;
    }
    
    public static int[] helper(String s){
        int[] ans = new int[26];
        for(int i=0; i<s.length(); i++){
            char ch = s.charAt(i);
            ans[ch-'a']++;
        }
        return ans;
    }
