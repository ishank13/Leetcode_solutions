//Approach -> break list in half and reverse the second half
// then compare two halves nodewise if nodes are different return false


public static ListNode midNode(ListNode node){
        if(node == null || node.next == null)
            return node;
        
        ListNode slow = node;
        ListNode fast = node;
        
        while(fast.next != null && fast.next.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
    
    public static ListNode reverseList(ListNode node){
        if(node == null || node.next == null)
            return node;
        
        ListNode prev = null;
        ListNode curr = node;
        
        while(curr != null){
            ListNode forw = curr.next;
            curr.next = prev;
            
            prev = curr;
            curr = forw;
        }
        return prev;
    }
    
    public boolean isPalindrome(ListNode head) {
        if (head == null || head.next == null)
            return true;

        ListNode mid = midNode(head);
        ListNode nhead = mid.next;
        mid.next = null;

        nhead = reverseList(nhead);

        ListNode c1 = head, c2 = nhead;
        boolean res = true;

        while (c1 != null && c2 != null) {
            if (c1.val != c2.val) {
                res = false;
                break;
            }
            c1 = c1.next;
            c2 = c2.next;
        }

        nhead = reverseList(nhead);
        mid.next = nhead;

        return res;
    }
