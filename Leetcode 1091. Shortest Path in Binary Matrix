//Approach -> As we know BFS gives us shortest path. Just apply BFS and count the levels.

int[][] dir = {{-1,0}, {-1,1}, {0,1}, {1,1}, {1,0}, {1,-1}, {0,-1}, {-1,-1}};
    
    public int shortestPathBinaryMatrix(int[][] grid) {
        
        int n = grid.length;
        int m = grid[0].length;
        
        if(grid[0][0] != 0 || grid[n-1][m-1] != 0) return -1;
        
        Queue<int[]> que = new LinkedList<>();
        que.add(new int[]{0,0});
        
        int level=1;
        while(que.size() != 0){
            int size = que.size();
            while(size-- > 0){
                int[] rvtx = que.peek();
                que.poll();
                
                if(rvtx[0] == n-1 && rvtx[1] == m-1)
                    return level;
                
                for(int d=0; d<dir.length; d++){
                    int r = rvtx[0] + dir[d][0];
                    int c = rvtx[1] + dir[d][1];
                    
                    if(r>=0 && c>=0 && r<n && c<m && grid[r][c] ==0){
                        grid[r][c] = 1;
                        que.add(new int[]{r,c});
                    }
                }
            }
            level++;
        }
        
        return -1;
    }
